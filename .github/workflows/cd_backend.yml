name: deploying the backend to vm

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v2

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build and push to dockerhub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/finno_be:${{ github.sha }}

      - name: ssh into vm and run docker images
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >& ~/ssh_key
          chmod 700 ~/ssh_key
          ssh -o StrictHostKeyChecking=no -i ~/ssh_key ubuntu@${{ secrets.VM_HOST }} << 'EOF'

            if ! docker network inspect finno_be_network >/dev/null 2>&1; then
              docker network create finno_be_network
            fi

            if ! docker volume inspect finno_be_volume1 >/dev/null 2>&1; then
              docker volume create finno_be_volume1
            fi

            if ! docker volume inspect finno_be_volume2 >/dev/null 2>&1; then
              docker volume create finno_be_volume2
            fi

            if ! docker volume inspect finno_be_volume3 >/dev/null 2>&1; then
              docker volume create finno_be_volume3
            fi

            if [ -z "$(docker ps -q -f name=mongo1)" ]; then
              docker run -d --name mongo1 -p 27017:27017 \
              --network finno_be_network -v finno_be_volume1:/data/db mongo:latest --replSet rs0  --bind_ip localhost,mongo1
            fi

            if [ -z "$(docker ps -q -f name=mongo2)" ]; then
              docker run -d --name mongo2 -p 27018:27017 \
              --network finno_be_network -v finno_be_volume2:/data/db mongo:latest --replSet rs0  --bind_ip localhost,mongo2
            fi

            if [ -z "$(docker ps -q -f name=mongo3)" ]; then
              docker run -d --name mongo3 -p 27019:27017 \
              --network finno_be_network -v finno_be_volume3:/data/db mongo:latest --replSet rs0  --bind_ip localhost,mongo3
            fi
            
            RS_STATUS=$(docker exec mongo1 mongosh --quiet --eval "try { rs.status().ok } catch(e) { 0 }" 2>/dev/null || echo "0")

            if [ "$RS_STATUS" != "1" ]; then
              echo "Initializing replica set..."
              docker exec mongo1 mongosh --eval "rs.initiate({
                _id: \"rs0\",
                members: [
                  {_id: 0, host: \"mongo1\"},
                  {_id: 1, host: \"mongo2\"},
                  {_id: 2, host: \"mongo3\"}
                ] 
              })"
              sleep 5
            else
              echo "Replica set already initialized"
            fi

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/finno_be:${{ github.sha }}

            if [ "$(docker ps -a -q -f name=finno_be)" ]; then
              docker rm -f finno_be
            fi

            echo "start docker run finno_be"
            docker run -d --name finno_be --network finno_be_network \
            -e PORT=3000 \
            -e DB_URL="${{ secrets.DB_URL }}" \
            -e DB_NAME="${{ secrets.DB_NAME }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
            -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/finno_be:${{ github.sha }}
            echo "end docker run finno_be"

            docker image prune --all --force

          EOF
